CS 480 hw4 report
Last Name: Luan
First Name: Songjian
ONID login: luans@oregonstate.edu

1. (2 pts) For this grammar: 
	E -> E - E | E ^ E | int
(a) Generate LR(1) DFA and action table;
	rules:
		1. E -> E - E
		2. E -> E ^ E
		3. E -> int
	state 0:
		S -> . E        $
		E -> . E - E    $/-
		E -> . E ^ E    $/^
		E -> . int      $/-/^

		int => state 1
		E   => state 2
	state 1:
		E -> int .      $/-/^

		^ => reduce using rule 3: E -> int
		- => reduce using rule 3: E -> int
		$ => reduce using rule 3: E -> int
	state 2:
		S -> E .        $
		E -> E . - E    $/-
		E -> E . ^ E    $/^

		$  => accept
		-  => state 3
		^  => state 4  
	state 3:
		E -> E - . E    $/-
		E -> . E - E    $/-
		E -> . int      $/-

		int => state 1
		E   => state 5
	state 4:
		E -> E ^ . E    $/^
		E -> . E ^ E    S/^
		E -> . int      $/^

		int => state 1
		E   => state 5
	state 5:
		E -> E - E .    $/-
		E -> E . - E    $/-
		E -> E ^ E .    $/^
		E -> E . ^ E    $/^

		$/- => reduce using rule 1: E -> E - E
		$/^ => reduce using rule 2: E -> E ^ E
		-   => state 3 
		^   => state 4
	action table:
		state | int  -     ^    $  | E
		------+--------------------+---
		   0  | s1                 | g2
		   1  |      r3         r3 |
		   2  |      s3    r4   acc|
		   3  | s1                 | g5
		   4  | s1                 | g5
		   5  |     r1/s3 r1/s4 r1 |
(b) Explain shift-reduce / reduce-reduce conflicts;
For state 5, they can go shift way or reduce way. 
In '-', it can either reduce to state 1 or shift to state 3
In '^', it can either reduce to state 1 or shift to state 4

(c) How to prefer left-associativity for -, right-associativity for ^, and ^ over + in precedence? (e.g., 2-3-4-5^6^7 means ((2-3)-4)-(5^(6^7)), as in mathematics).
S -> L
L -> L - R | T
R -> T + R | T + X
X -> T ^ X | T
T -> int
	 
(d) Show that LR(0) and SLR(1) would have identical DFAs as the LR(1) one. Hint: 1. no need to redo the LR(0) or SLR(1) DFA/tables. You simply need to make observations from the LR(1) DFA, and you need to show compute FOLLOW sets. 2. it's easy to see FOLLOW(E) = {-, ^, $}. Note: the action table for LR(0) might be different from those for LR(1) or SLR(1), since a reduce action does _not_ depend on the lookahead in LR(0).
FOLLOW sets:
	E {$, -, ^}

(e) In terms of error detection, is there any difference between LR(1) and LR(0)? Consider the four ungrammartical inputs used in problem 0 (plus one more: int + int int). Which states in LR(1) will report error? Which states in LR(0)? What about SLR(1)?
State 3 reports error at 'int - . -', since there is no action on '-' for state 3.
State 4 reports error at 'int ^ . ^', since there is no action on '^' for state 4.
State 0 reports error at '. - int' and '. ^ int', since there is no action on '-' and '^' for state 0.
State 3 reports error at 'int - . $', since there is no action on '$'' for state 3.
State 4 reports error at 'int ^ . $', since there is no action on '$'' for state 4.

2. (1 pt)
(a) Write an equivalent but unambiguous grammar (with the same preferences as in (c)).
S -> L
L -> L - R | int
R -> int ^ R | int
(b) Generate LR(1) DFA and action table for the new grammar.
	rules:
		1. S -> L
		2. L -> L - R
		3. L -> int
		4. R -> int ^ R
		5. R -> int
	state 0:
		S -> . L        $
		L -> . L - R    $/-
		L -> . int      $/-
		R -> . T ^ R    $/^
		R -> . int      $/^

		int => state 1
		L   => state 2
	state 1: 
		R -> int . ^ R  $/^
		R -> int .      $/^
		L -> int .      $/-
		
		^ => state 4
		$/^ => reduce using rule 5: R -> int
		$/- => reduce using rule 3: L -> int
	state 2:
		S -> L .        $
		L -> L . - R    $/-
		
		$ => accept
		- => state 3
	state 3:
		L -> L . - R    $/-

		- => state 5 
	state 4:
		R -> int - . R  $/-

		R => state 5
	state 5:
		R -> int ^ R .  $/^
		R -> . int ^ R  $/^

		$/^ => reduce using rule 4: R -> int ^ R
		int   => state 1
	action table:
		state | int  -     ^     $  | L   R
		------+---------------------+---------
		   0  | s1                  | g2
		   1  |            s4       |
		   2  |      s3         acc |
		   3  |      s5             | 
		   4  | s1                  |     g5
		   5  | s1         r4   r4  |
(c) Is there any conflict? Why? How were the preferences in (c) implemented by the new DFA?

No. Because this grammar is unambiguious so it has set precedence for left extension and right extension.
In this way, this grammar can gaurentee a string to go through correct states without any conflict.

(d) Compute the FOLLOW sets. Would the SLR(1) table here be simpler than the LR(1) one?
FOLLOW sets:
	L {$, -}
	R {$, ^}
Yes, SLR(1) is much simpler than LR(1)

3. (1 pt) For this grammar:
S -> Aa | Bb | ac 
A -> a
B -> a
(a) Generate the LR(0) DFA.
	rules:
		1. S -> A a
		2. S -> B b
		3. S -> a c
		4. A -> a
		5. B -> a
	state 0:
		S -> . A a
		S -> . B b
		S -> . a c
		A -> . a
		B -> . a

		A => state 1
		B => state 2
		a => state 3
	state 1:
		S -> A . a

		a => state 5
		A => shift using rule 1: S -> A a
	state 2:
		s -> B . b

		b => state 6
		B => shift using rule 2: S -> B b
	state 3:
		S -> a . c
		A -> a .
		B -> a .

		c => state 4
		a => reduce using rule 4: A -> a
		a => reduce using rule 5: B -> a
	state 4:
		S -> a c .

		c => reduce using rule 3: S -> a c
	state 5:
		S -> A a .

		a => reduce using rule 1: S -> A a
	state 6:
		S -> B b .

		b => reduce using rule 2: S -> B b
(b) Explain the shift-reduce and reduce-reduce conflicts.
For state 1 and state 2, they can go shift way or reduce way. 
In state 1, S can be reduce as "S -> a . a" or shift as "S -> A a ." 
In state 2, S can be reduce as "S -> a . b" or shift as "S -> B b ."

(c) Compute the FOLLOW sets.
FOLLOW sets:
	S {a, c, $}
	A {a}
	B {b}

(d) Show that SLR(1) has no conflict, and draw the action table. This example shows that SLR(1) is more powerful than LR(0).
According to FOLLOW sets, S can either go 'a', 'b', or 'c' directly to accept state or go 'A' or 'B' to accept state finally,
which means SLR(1) has no conflict.

4. (1 pt) For this grammar:
S -> Aa | Bb | bAb 
A -> a
B -> a
(a) Generate the LR(0) DFA.
	rules:
		1. S -> A a
		2. S -> B b
		3. S -> b A b
		4. A -> a
		5. B -> a
	state 0:
		S -> . A a
		S -> . B b
		S -> . b A b
		A -> . a
		B -> . a

		a => state 1
		A => state 3
		B => state 4
	state 1:
		S -> A a .
		A -> a .
		B -> a .

		a => reduce using rule 1: S -> A a
		a => reduce using rule 4: A -> a
		a => reduce using rule 5: B -> a
	state 2:
		s -> A . a
		S -> b A . b
		
		a => state 1
		b => state 6
	state 3:
		S -> b . A b

		A => state 2
	state 4:
		S -> B . b

		b => state 5
	state 5:
		S -> B b .

		b => reduce using rule 2: S -> B b
	state 6: 
		S -> b A b .

		b => reduce using rule 3: S -> b A b
(b) Compute the FOLLOW sets, and show that SLR(1) still has conflict.
FOLLOW sets:
	S {a, b, $}
	A {a}
	B {a}
According to FOLLOW sets, S can either go 'a' or 'b' directly to accept state or go 'A' or 'B' to accept state finally,
which means SLR(1) has no conflict.

(c) Generate the LR(1) DFA and action table.
	rules:
		1. S -> A a
		2. S -> B b
		3. S -> b A b
		4. A -> a
		5. B -> a
	state 0:
		S -> . A a         $
		S -> . B b         $
		S -> . b A b       $
		A -> . a           a
		B -> . a           a

		a => state 1
		A => state 3
		B => state 4
	state 1:
		S -> A a .         $
		A -> a .           a
		B -> a .           a

		$ => accept
		a => reduce using rule 4: A -> a
		a => reduce using rule 5: B -> a
	state 2:
		s -> A . a         a
		S -> b A . b       b
		
		a => state 1
		b => state 6
	state 3:
		S -> b . A b       $

		A => state 2
	state 4:
		S -> B . b         $

		b => state 5
	state 5:
		S -> B b .         $

		$ => accept
	state 6: 
		S -> b A b .       $

		$ => reduce using rule 3: S -> b A b
	action table:
		state | a      b     $  |  A    B
		------+-----------------+----------
		   0  | s1              |  g3   g4
		   1  | r4/r5       acc |
		   2  | s1     s6       |
		   3  |                 |  g2
		   4  |                 |       g5
		   5  |             acc |
		   6  |             acc |

(d) Explain why LR(1) has no conflict (while SLR(1) does). This example shows that LR(1) is more powerful than SLR(1).
First, this grammar is unambiguious so there is unique way to let DFA accept. Second, in this action table, 
there is any cell showing reduce and shift at the same time. 

5. (Extra Credit, 1.5 pts) 
(a) Show that LALR(1) is more powerful than SLR(1). Hint: use the grammar in problem 3.
(b) Show an example where LALR(1) has fewer states than LR(1). Hint: see LR slides.
(c) Show that LR(1) is more powerful than LALR(1). Hint: use this grammar:
S -> Aa | Bb | bAb | bBa
A -> a
B -> b
